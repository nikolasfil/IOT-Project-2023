Search.setIndex({"docnames": ["broker", "button_sensor", "connector_server", "context_provider", "files_keeping/index", "index", "modules", "publisher_broker", "sensor_context_provider", "servers", "subscriber_broker", "tempCodeRunnerFile", "tracker_sensor", "virtual_sensor"], "filenames": ["broker.rst", "button_sensor.rst", "connector_server.rst", "context_provider.rst", "files_keeping/index.rst", "index.rst", "modules.rst", "publisher_broker.rst", "sensor_context_provider.rst", "servers.rst", "subscriber_broker.rst", "tempCodeRunnerFile.rst", "tracker_sensor.rst", "virtual_sensor.rst"], "titles": ["broker module", "button_sensor module", "connector_server module", "context_provider module", "Welcome to IOT\u2019s documentation!", "Welcome to IOT\u2019s documentation!", "src", "publisher_broker module", "sensor_context_provider module", "servers package", "subscriber_broker module", "tempCodeRunnerFile module", "tracker_sensor module", "virtual_sensor module"], "terms": {"class": [0, 1, 2, 3, 7, 8, 10, 12, 13], "client_id": [0, 7], "str": [0, 2, 3, 8, 13], "none": [0, 1, 2, 3, 7, 8, 12, 13], "topic": [0, 7], "port": [0, 7], "int": 0, "run_only_onc": [0, 7], "bool": [0, 3], "fals": [0, 3, 7], "debug": 0, "sourc": [0, 1, 2, 3, 7, 8, 10, 12, 13], "base": [0, 1, 3, 7, 8, 10, 12, 13], "object": [0, 3, 8, 12, 13], "connect_mqtt": [0, 5, 6], "dict_to_json": [0, 5, 6], "payload": [0, 3], "convert": [0, 13], "dict": [0, 1, 3, 8, 12, 13], "json": [0, 2, 3, 12, 13], "string": 0, "exit": [0, 5, 6], "generate_unique_hash": [0, 5, 6, 13], "json_to_dict": [0, 5, 6], "log": [0, 5, 6], "messag": 0, "file": 0, "main": [0, 5, 6, 7, 10], "on_connect": [0, 5, 6], "client": [0, 10], "userdata": [0, 10], "flag": 0, "rc": 0, "on_messag": [0, 5, 6, 10], "msg": [0, 10], "on_publish": [0, 5, 6], "mid": 0, "path_to_fil": [0, 5, 6], "filenam": 0, "return": [0, 1, 2, 3, 8, 12, 13], "path": 0, "publish": [0, 5, 6, 7], "run_loop": [0, 5, 6], "run_onc": [0, 5, 6], "subscrib": [0, 5, 6, 10], "button": [1, 2, 5, 6], "kwarg": [1, 3, 8, 10, 12, 13], "sensor": [1, 2, 5, 6, 12, 13], "default_valu": [1, 5, 6, 12, 13], "initi": [1, 5, 6, 12, 13], "mqtt_to_cp": [1, 5, 6, 12, 13], "arg": [1, 13], "descript": [1, 2, 3, 8, 12, 13], "transform": [1, 12, 13], "inform": [1, 2, 12, 13], "format": [1, 2, 12, 13], "context": [1, 2, 12, 13], "provid": [1, 2, 12, 13], "can": [1, 12, 13], "understand": [1, 12, 13], "rais": [1, 12, 13], "valueerror": [1, 12, 13], "_description_": [1, 13], "type": [1, 2, 3, 8, 12, 13], "_type_": [1, 13], "buttoncpf": [1, 5, 6], "sensorcpf": [1, 5, 6, 12, 13], "default": [1, 12, 13], "valu": [1, 12, 13], "keep": [1, 13], "an": [1, 13], "interfac": [1, 13], "new_ent": [1, 5, 6, 8, 12, 13], "entity_data": [1, 8, 12, 13], "creat": [1, 8, 12, 13], "new": [1, 8, 12, 13], "entiti": [1, 8, 12, 13], "given": [1, 3, 8, 12, 13], "data": [1, 2, 8, 12, 13], "ad": [1, 13], "well": [1, 13], "paramet": [1, 2, 3, 8, 12, 13], "option": [1, 12, 13], "about": [1, 12, 13], "devic": [1, 2, 12, 13], "i": [1, 2, 3, 12, 13], "when": [1, 13], "instanc": [1, 13], "method": [1, 3, 13], "call": [1, 13], "complet": [1, 13], "form": [1, 13], "dictionari": [1, 8, 13], "device_info": [2, 5, 6], "get": [2, 3, 8, 13], "info": [2, 12], "from": [2, 3, 8, 12, 13], "mqtt": [2, 12], "server": [2, 5, 6, 12], "get_devic": [2, 5, 6], "broker": [2, 5, 6, 7, 10], "The": [2, 3, 8, 12, 13], "handling_devic": [2, 5, 6, 10], "handl": 2, "chang": 2, "It": 2, "take": 2, "like": 2, "differenti": 2, "between": 2, "tracker": [2, 5, 6, 12], "contain": [2, 12], "sent": [2, 12], "recogn": 2, "home": [2, 5, 6], "page": [2, 4, 5], "A": 2, "simpl": 2, "request": [2, 3, 8], "check": [2, 3], "run": 2, "html": 2, "render": 2, "contextprovid": [3, 5, 6, 8], "build_request": [3, 5, 6], "build": 3, "url": 3, "header": 3, "send": 3, "us": [3, 13], "respons": [3, 8], "get_json_respons": [3, 5, 6], "is_json": [3, 5, 6], "python": [3, 8], "true": 3, "make_request": [3, 5, 6], "make": 3, "set_head": [3, 5, 6], "set": [3, 12], "index": [4, 5], "search": [4, 5], "button_sensor": [5, 6], "connector_serv": [5, 6], "context_provid": [5, 6], "publisher_brok": [5, 6], "sensor_context_provid": [5, 6], "sensorcp": [5, 6, 8], "create_ent": [5, 6, 8], "delete_ent": [5, 6, 8], "get_attribut": [5, 6, 8], "get_ent": [5, 6, 8], "update_ent": [5, 6, 8], "packag": [5, 6], "submodul": [5, 6], "flask_server_exampl": [5, 6], "content": [5, 6], "subscriber_brok": [5, 6], "tracker_sensor": [5, 6], "trackercpf": [5, 6, 12], "virtual_sensor": [5, 6], "get_datetim": [5, 6, 13], "info_to_json": [5, 6, 13], "get_dat": [5, 6, 13], "get_tim": [5, 6, 13], "modul": 6, "assign": 8, "result": 8, "self": 8, "entity_id": 8, "delet": 8, "id": [8, 12], "attribut": [8, 12], "either": 8, "list": 8, "updat": [8, 12], "gener": [12, 13], "ar": 12, "deviceinfo": 12, "rxinfo": 12, "rx": 12, "txinfo": 12, "tx": 12, "have": 12, "been": 12, "exampl": 12, "tracker4": 12, "asset": 12, "track": 12, "locat": 12, "metadata": 12, "null": 12, "temperatur": 12, "float": 12, "25": 12, "5": 12, "timestamp": [12, 13], "date": [12, 13], "2021": 12, "08": 12, "time": [12, 13], "12": 12, "00": 12, "all": 12, "need": 12, "No": 12, "uniqu": 13, "hash": 13, "current": 13, "datetim": 13, "isoformat": 13}, "objects": {"": [[0, 0, 0, "-", "broker"], [1, 0, 0, "-", "button_sensor"], [2, 0, 0, "-", "connector_server"], [3, 0, 0, "-", "context_provider"], [7, 0, 0, "-", "publisher_broker"], [8, 0, 0, "-", "sensor_context_provider"], [10, 0, 0, "-", "subscriber_broker"], [12, 0, 0, "-", "tracker_sensor"], [13, 0, 0, "-", "virtual_sensor"]], "broker": [[0, 1, 1, "", "Broker"]], "broker.Broker": [[0, 2, 1, "", "connect_mqtt"], [0, 2, 1, "", "dict_to_json"], [0, 2, 1, "", "exit"], [0, 2, 1, "", "generate_unique_hash"], [0, 2, 1, "", "json_to_dict"], [0, 2, 1, "", "logging"], [0, 2, 1, "", "main"], [0, 2, 1, "", "on_connect"], [0, 2, 1, "", "on_message"], [0, 2, 1, "", "on_publish"], [0, 2, 1, "", "path_to_file"], [0, 2, 1, "", "publish"], [0, 2, 1, "", "run_loop"], [0, 2, 1, "", "run_once"], [0, 2, 1, "", "subscribe"]], "button_sensor": [[1, 1, 1, "", "Button"], [1, 1, 1, "", "ButtonCPF"]], "button_sensor.Button": [[1, 2, 1, "", "default_values"], [1, 2, 1, "", "initialize"], [1, 2, 1, "", "mqtt_to_cp"]], "button_sensor.ButtonCPF": [[1, 2, 1, "", "default_values"], [1, 2, 1, "", "new_entity"]], "connector_server": [[2, 3, 1, "", "device_info"], [2, 3, 1, "", "get_device"], [2, 3, 1, "", "handling_device"], [2, 3, 1, "", "home"]], "context_provider": [[3, 1, 1, "", "ContextProvider"]], "context_provider.ContextProvider": [[3, 2, 1, "", "build_request"], [3, 2, 1, "", "get_json_response"], [3, 2, 1, "", "is_json"], [3, 2, 1, "", "make_request"], [3, 2, 1, "", "set_headers"]], "publisher_broker": [[7, 1, 1, "", "Publisher"]], "publisher_broker.Publisher": [[7, 2, 1, "", "main"]], "sensor_context_provider": [[8, 1, 1, "", "SensorCP"]], "sensor_context_provider.SensorCP": [[8, 2, 1, "", "create_entity"], [8, 2, 1, "", "delete_entity"], [8, 2, 1, "", "get_attribute"], [8, 2, 1, "", "get_entity"], [8, 2, 1, "", "new_entity"], [8, 2, 1, "", "update_entity"]], "subscriber_broker": [[10, 1, 1, "", "Subscriber"]], "subscriber_broker.Subscriber": [[10, 2, 1, "", "handling_device"], [10, 2, 1, "", "main"], [10, 2, 1, "", "on_message"]], "tracker_sensor": [[12, 1, 1, "", "Tracker"], [12, 1, 1, "", "TrackerCPF"]], "tracker_sensor.Tracker": [[12, 2, 1, "", "default_values"], [12, 2, 1, "", "initialize"], [12, 2, 1, "", "mqtt_to_cp"]], "tracker_sensor.TrackerCPF": [[12, 2, 1, "", "default_values"], [12, 2, 1, "", "new_entity"]], "virtual_sensor": [[13, 1, 1, "", "Sensor"], [13, 1, 1, "", "SensorCPF"]], "virtual_sensor.Sensor": [[13, 2, 1, "", "generate_unique_hash"], [13, 2, 1, "", "get_datetime"], [13, 2, 1, "", "info_to_json"], [13, 2, 1, "", "mqtt_to_cp"]], "virtual_sensor.SensorCPF": [[13, 2, 1, "", "default_values"], [13, 2, 1, "", "get_date"], [13, 2, 1, "", "get_time"], [13, 2, 1, "", "new_entity"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"broker": 0, "modul": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13], "button_sensor": 1, "connector_serv": 2, "context_provid": 3, "welcom": [4, 5], "iot": [4, 5], "": [4, 5], "document": [4, 5], "indic": [4, 5], "tabl": [4, 5], "src": [5, 6], "publisher_brok": 7, "sensor_context_provid": 8, "server": 9, "packag": 9, "submodul": 9, "flask_server_exampl": 9, "content": 9, "subscriber_brok": 10, "tempcoderunnerfil": 11, "tracker_sensor": 12, "virtual_sensor": 13}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"broker module": [[0, "module-broker"]], "button_sensor module": [[1, "module-button_sensor"]], "connector_server module": [[2, "module-connector_server"]], "context_provider module": [[3, "module-context_provider"]], "Welcome to IOT\u2019s documentation!": [[4, "welcome-to-iot-s-documentation"], [5, "welcome-to-iot-s-documentation"]], "Indices and tables": [[4, "indices-and-tables"], [5, "indices-and-tables"]], "Modules": [[4, "modules"], [5, "modules"]], "src": [[5, "src"], [6, "src"]], "publisher_broker module": [[7, "module-publisher_broker"]], "sensor_context_provider module": [[8, "module-sensor_context_provider"]], "servers package": [[9, "servers-package"]], "Submodules": [[9, "submodules"]], "servers.flask_server_example module": [[9, "servers-flask-server-example-module"]], "Module contents": [[9, "module-contents"]], "subscriber_broker module": [[10, "module-subscriber_broker"]], "tempCodeRunnerFile module": [[11, "tempcoderunnerfile-module"]], "tracker_sensor module": [[12, "module-tracker_sensor"]], "virtual_sensor module": [[13, "module-virtual_sensor"]]}, "indexentries": {"broker (class in broker)": [[0, "broker.Broker"]], "broker": [[0, "module-broker"]], "connect_mqtt() (broker.broker method)": [[0, "broker.Broker.connect_mqtt"]], "dict_to_json() (broker.broker method)": [[0, "broker.Broker.dict_to_json"]], "exit() (broker.broker method)": [[0, "broker.Broker.exit"]], "generate_unique_hash() (broker.broker method)": [[0, "broker.Broker.generate_unique_hash"]], "json_to_dict() (broker.broker method)": [[0, "broker.Broker.json_to_dict"]], "logging() (broker.broker method)": [[0, "broker.Broker.logging"]], "main() (broker.broker method)": [[0, "broker.Broker.main"]], "module": [[0, "module-broker"], [1, "module-button_sensor"], [2, "module-connector_server"], [3, "module-context_provider"], [7, "module-publisher_broker"], [8, "module-sensor_context_provider"], [10, "module-subscriber_broker"], [12, "module-tracker_sensor"], [13, "module-virtual_sensor"]], "on_connect() (broker.broker method)": [[0, "broker.Broker.on_connect"]], "on_message() (broker.broker method)": [[0, "broker.Broker.on_message"]], "on_publish() (broker.broker method)": [[0, "broker.Broker.on_publish"]], "path_to_file() (broker.broker method)": [[0, "broker.Broker.path_to_file"]], "publish() (broker.broker method)": [[0, "broker.Broker.publish"]], "run_loop() (broker.broker method)": [[0, "broker.Broker.run_loop"]], "run_once() (broker.broker method)": [[0, "broker.Broker.run_once"]], "subscribe() (broker.broker method)": [[0, "broker.Broker.subscribe"]], "button (class in button_sensor)": [[1, "button_sensor.Button"]], "buttoncpf (class in button_sensor)": [[1, "button_sensor.ButtonCPF"]], "button_sensor": [[1, "module-button_sensor"]], "default_values() (button_sensor.button method)": [[1, "button_sensor.Button.default_values"]], "default_values() (button_sensor.buttoncpf method)": [[1, "button_sensor.ButtonCPF.default_values"]], "initialize() (button_sensor.button method)": [[1, "button_sensor.Button.initialize"]], "mqtt_to_cp() (button_sensor.button method)": [[1, "button_sensor.Button.mqtt_to_cp"]], "new_entity() (button_sensor.buttoncpf method)": [[1, "button_sensor.ButtonCPF.new_entity"]], "connector_server": [[2, "module-connector_server"]], "device_info() (in module connector_server)": [[2, "connector_server.device_info"]], "get_device() (in module connector_server)": [[2, "connector_server.get_device"]], "handling_device() (in module connector_server)": [[2, "connector_server.handling_device"]], "home() (in module connector_server)": [[2, "connector_server.home"]], "contextprovider (class in context_provider)": [[3, "context_provider.ContextProvider"]], "build_request() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.build_request"]], "context_provider": [[3, "module-context_provider"]], "get_json_response() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.get_json_response"]], "is_json() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.is_json"]], "make_request() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.make_request"]], "set_headers() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.set_headers"]], "publisher (class in publisher_broker)": [[7, "publisher_broker.Publisher"]], "main() (publisher_broker.publisher method)": [[7, "publisher_broker.Publisher.main"]], "publisher_broker": [[7, "module-publisher_broker"]], "sensorcp (class in sensor_context_provider)": [[8, "sensor_context_provider.SensorCP"]], "create_entity() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.create_entity"]], "delete_entity() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.delete_entity"]], "get_attribute() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.get_attribute"]], "get_entity() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.get_entity"]], "new_entity() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.new_entity"]], "sensor_context_provider": [[8, "module-sensor_context_provider"]], "update_entity() (sensor_context_provider.sensorcp method)": [[8, "sensor_context_provider.SensorCP.update_entity"]], "subscriber (class in subscriber_broker)": [[10, "subscriber_broker.Subscriber"]], "handling_device() (subscriber_broker.subscriber method)": [[10, "subscriber_broker.Subscriber.handling_device"]], "main() (subscriber_broker.subscriber method)": [[10, "subscriber_broker.Subscriber.main"]], "on_message() (subscriber_broker.subscriber method)": [[10, "subscriber_broker.Subscriber.on_message"]], "subscriber_broker": [[10, "module-subscriber_broker"]], "tracker (class in tracker_sensor)": [[12, "tracker_sensor.Tracker"]], "trackercpf (class in tracker_sensor)": [[12, "tracker_sensor.TrackerCPF"]], "default_values() (tracker_sensor.tracker method)": [[12, "tracker_sensor.Tracker.default_values"]], "default_values() (tracker_sensor.trackercpf method)": [[12, "tracker_sensor.TrackerCPF.default_values"]], "initialize() (tracker_sensor.tracker method)": [[12, "tracker_sensor.Tracker.initialize"]], "mqtt_to_cp() (tracker_sensor.tracker method)": [[12, "tracker_sensor.Tracker.mqtt_to_cp"]], "new_entity() (tracker_sensor.trackercpf method)": [[12, "tracker_sensor.TrackerCPF.new_entity"]], "tracker_sensor": [[12, "module-tracker_sensor"]], "sensor (class in virtual_sensor)": [[13, "virtual_sensor.Sensor"]], "sensorcpf (class in virtual_sensor)": [[13, "virtual_sensor.SensorCPF"]], "default_values() (virtual_sensor.sensorcpf method)": [[13, "virtual_sensor.SensorCPF.default_values"]], "generate_unique_hash() (virtual_sensor.sensor method)": [[13, "virtual_sensor.Sensor.generate_unique_hash"]], "get_date() (virtual_sensor.sensorcpf method)": [[13, "virtual_sensor.SensorCPF.get_date"]], "get_datetime() (virtual_sensor.sensor method)": [[13, "virtual_sensor.Sensor.get_datetime"]], "get_time() (virtual_sensor.sensorcpf method)": [[13, "virtual_sensor.SensorCPF.get_time"]], "info_to_json() (virtual_sensor.sensor method)": [[13, "virtual_sensor.Sensor.info_to_json"]], "mqtt_to_cp() (virtual_sensor.sensor method)": [[13, "virtual_sensor.Sensor.mqtt_to_cp"]], "new_entity() (virtual_sensor.sensorcpf method)": [[13, "virtual_sensor.SensorCPF.new_entity"]], "virtual_sensor": [[13, "module-virtual_sensor"]]}})