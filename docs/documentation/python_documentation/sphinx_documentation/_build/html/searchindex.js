Search.setIndex({"docnames": ["broker", "button_sensor", "connector_server", "context_provider", "coords_generator", "index", "modules", "publisher_broker", "sensor_context_provider", "subscriber_broker", "tracker_sensor", "virtual_sensor"], "filenames": ["broker.rst", "button_sensor.rst", "connector_server.rst", "context_provider.rst", "coords_generator.rst", "index.rst", "modules.rst", "publisher_broker.rst", "sensor_context_provider.rst", "subscriber_broker.rst", "tracker_sensor.rst", "virtual_sensor.rst"], "titles": ["broker module", "button_sensor module", "connector_server module", "context_provider module", "coords_generator module", "Welcome to IOT\u2019s documentation!", "src", "publisher_broker module", "sensor_context_provider module", "subscriber_broker module", "tracker_sensor module", "virtual_sensor module"], "terms": {"class": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11], "client_id": [0, 7], "str": [0, 2, 3, 4, 8, 11], "none": [0, 1, 2, 3, 7, 8, 10, 11], "topic": [0, 7], "port": [0, 7], "int": [0, 4], "run_only_onc": [0, 7], "bool": [0, 3], "fals": [0, 3, 7], "debug": 0, "sourc": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11], "base": [0, 1, 3, 4, 7, 8, 9, 10, 11], "object": [0, 3, 4, 8, 10, 11], "connect_mqtt": [0, 5, 6], "dict_to_json": [0, 5, 6], "payload": [0, 3], "convert": [0, 11], "dict": [0, 1, 3, 8, 10, 11], "json": [0, 2, 3, 10, 11], "string": 0, "exit": [0, 5, 6], "generate_unique_hash": [0, 5, 6, 11], "json_to_dict": [0, 5, 6], "log": [0, 5, 6], "messag": 0, "file": [0, 4], "main": [0, 4, 5, 6, 7, 9], "on_connect": [0, 5, 6], "client": [0, 9], "userdata": [0, 9], "flag": 0, "rc": 0, "on_messag": [0, 5, 6, 9], "msg": [0, 9], "on_publish": [0, 5, 6], "mid": 0, "path_to_fil": [0, 5, 6], "filenam": [0, 4], "return": [0, 1, 2, 3, 4, 8, 10, 11], "path": 0, "publish": [0, 5, 6, 7], "run_loop": [0, 5, 6], "run_onc": [0, 5, 6], "subscrib": [0, 5, 6, 9], "button": [1, 2, 5, 6], "kwarg": [1, 3, 4, 7, 8, 9, 10, 11], "sensormqttformat": [1, 5, 6, 10, 11], "default_valu": [1, 5, 6, 10, 11], "initi": [1, 5, 6, 10, 11], "mqtt_to_cp": [1, 5, 6, 10, 11], "arg": [1, 11], "descript": [1, 2, 3, 4, 8, 10, 11], "transform": [1, 10, 11], "inform": [1, 2, 10, 11], "format": [1, 2, 10, 11], "context": [1, 2, 10, 11], "provid": [1, 2, 10, 11], "can": [1, 10, 11], "understand": [1, 10, 11], "rais": [1, 10, 11], "valueerror": [1, 10, 11], "_description_": [1, 11], "type": [1, 2, 3, 4, 8, 10, 11], "_type_": 1, "buttoncpf": [1, 5, 6], "sensorcpformat": [1, 5, 6, 10, 11], "default": [1, 10, 11], "valu": [1, 4, 10, 11], "sensorcpf": [1, 11], "keep": [1, 11], "an": [1, 11], "interfac": [1, 11], "new_ent": [1, 5, 6, 8, 10, 11], "entity_data": [1, 8, 10, 11], "creat": [1, 8, 10, 11], "new": [1, 8, 10, 11], "entiti": [1, 8, 10, 11], "given": [1, 3, 4, 8, 10, 11], "data": [1, 2, 8, 10, 11], "ad": [1, 11], "well": [1, 11], "paramet": [1, 2, 3, 4, 8, 10, 11], "option": [1, 10, 11], "about": [1, 10, 11], "devic": [1, 2, 10, 11], "i": [1, 2, 3, 10, 11], "when": [1, 11], "instanc": [1, 10, 11], "method": [1, 3, 11], "call": [1, 11], "complet": [1, 11], "form": [1, 11], "dictionari": [1, 8, 11], "build_sql_data": [2, 5, 6], "device_data": 2, "build": [2, 3], "sql": 2, "databas": 2, "The": [2, 3, 4, 8, 10, 11], "from": [2, 3, 8, 10, 11], "device_info": [2, 5, 6], "get": [2, 3, 8, 11], "info": [2, 10], "mqtt": [2, 10], "server": [2, 10], "fire": [2, 5, 6], "A": 2, "simpl": 2, "request": [2, 3, 8], "check": [2, 3], "run": 2, "html": 2, "render": 2, "get_devic": [2, 5, 6], "broker": [2, 5, 6, 7, 9], "get_id": [2, 5, 6], "serial": 2, "id": [2, 8, 10], "number": [2, 4], "handling_devic": [2, 5, 6, 9], "handl": 2, "chang": 2, "It": 2, "take": 2, "sensor": [2, 10, 11], "like": 2, "differenti": 2, "between": 2, "tracker": [2, 10], "contain": [2, 10], "sent": [2, 10], "recogn": 2, "home": [2, 5, 6], "page": [2, 5], "save_to_databas": [2, 5, 6], "save": 2, "contextprovid": [3, 5, 6, 8], "build_request": [3, 5, 6], "url": 3, "header": 3, "send": 3, "us": [3, 11], "respons": [3, 8, 10, 11], "get_json_respons": [3, 5, 6], "is_json": [3, 5, 6], "python": [3, 8], "true": 3, "make_request": [3, 5, 6], "make": 3, "set_head": [3, 5, 6], "set": [3, 10], "coordsgener": 4, "example_gener": 4, "gener": [4, 5, 6, 10, 11], "10": 4, "csv": 4, "random": 4, "coordin": 4, "within": 4, "rang": 4, "ar": [4, 10], "min_x": 4, "38": 4, "20": 4, "max_x": 4, "21": 4, "min_i": 4, "81": 4, "max_i": 4, "85": 4, "num_set": 4, "60": 4, "name": 4, "path_1": 4, "path_2": 4, "path_10": 4, "generate_coordin": 4, "list": [4, 8], "float": [4, 10], "minimum": 4, "x": 4, "maximum": 4, "y": 4, "tupl": 4, "repres": 4, "sort_coordin": 4, "sort": 4, "write_to_csv": 4, "write": 4, "index": 5, "search": 5, "button_sensor": [5, 6], "connector_serv": [5, 6], "context_provid": [5, 6], "publisher_brok": [5, 6], "virtual_button": [5, 6, 7], "virtual_track": [5, 6, 7], "sensor_context_provid": [5, 6], "sensorcpconnector": [5, 6, 8], "create_ent": [5, 6, 8], "delete_ent": [5, 6, 8], "get_attribut": [5, 6, 8], "get_ent": [5, 6, 8], "update_ent": [5, 6, 8], "subscriber_brok": [5, 6], "tracker_sensor": [5, 6], "trackercpformat": [5, 6, 10], "trackermqttformat": [5, 6, 10], "virtual_sensor": [5, 6], "classfunction": [5, 6, 11], "get_dat": [5, 6, 11], "get_tim": [5, 6, 11], "get_datetim": [5, 6, 11], "info_to_json": [5, 6, 11], "modul": 6, "assign": 8, "result": 8, "self": 8, "entity_id": 8, "delet": 8, "attribut": [8, 10], "either": 8, "updat": [8, 10], "exampl": 10, "tracker4": 10, "locat": 10, "metadata": 10, "null": 10, "temperatur": 10, "25": 10, "5": 10, "timestamp": [10, 11], "datetim": [10, 11], "date": [10, 11], "2024": 10, "02": 10, "14": 10, "time": [10, 11], "04": 10, "00": 10, "58": 10, "609486": 10, "all": 10, "need": 10, "No": 10, "Will": [10, 11], "everi": [10, 11], "iter": [10, 11], "deviceinfo": 10, "rxinfo": 10, "rx": 10, "txinfo": 10, "tx": 10, "have": 10, "been": 10, "isoformat": 11, "uniqu": 11, "hash": 11, "current": 11, "accept": 11}, "objects": {"": [[0, 0, 0, "-", "broker"], [1, 0, 0, "-", "button_sensor"], [2, 0, 0, "-", "connector_server"], [3, 0, 0, "-", "context_provider"], [4, 0, 0, "-", "coords_generator"], [7, 0, 0, "-", "publisher_broker"], [8, 0, 0, "-", "sensor_context_provider"], [9, 0, 0, "-", "subscriber_broker"], [10, 0, 0, "-", "tracker_sensor"], [11, 0, 0, "-", "virtual_sensor"]], "broker": [[0, 1, 1, "", "Broker"]], "broker.Broker": [[0, 2, 1, "", "connect_mqtt"], [0, 2, 1, "", "dict_to_json"], [0, 2, 1, "", "exit"], [0, 2, 1, "", "generate_unique_hash"], [0, 2, 1, "", "json_to_dict"], [0, 2, 1, "", "logging"], [0, 2, 1, "", "main"], [0, 2, 1, "", "on_connect"], [0, 2, 1, "", "on_message"], [0, 2, 1, "", "on_publish"], [0, 2, 1, "", "path_to_file"], [0, 2, 1, "", "publish"], [0, 2, 1, "", "run_loop"], [0, 2, 1, "", "run_once"], [0, 2, 1, "", "subscribe"]], "button_sensor": [[1, 1, 1, "", "Button"], [1, 1, 1, "", "ButtonCPF"]], "button_sensor.Button": [[1, 2, 1, "", "default_values"], [1, 2, 1, "", "initialize"], [1, 2, 1, "", "mqtt_to_cp"]], "button_sensor.ButtonCPF": [[1, 2, 1, "", "default_values"], [1, 2, 1, "", "new_entity"]], "connector_server": [[2, 3, 1, "", "build_sql_data"], [2, 3, 1, "", "device_info"], [2, 3, 1, "", "fire"], [2, 3, 1, "", "get_device"], [2, 3, 1, "", "get_id"], [2, 3, 1, "", "handling_device"], [2, 3, 1, "", "home"], [2, 3, 1, "", "save_to_database"]], "context_provider": [[3, 1, 1, "", "ContextProvider"]], "context_provider.ContextProvider": [[3, 2, 1, "", "build_request"], [3, 2, 1, "", "get_json_response"], [3, 2, 1, "", "is_json"], [3, 2, 1, "", "make_request"], [3, 2, 1, "", "set_headers"]], "coords_generator": [[4, 1, 1, "", "CoordsGenerator"]], "coords_generator.CoordsGenerator": [[4, 2, 1, "", "example_generate"], [4, 2, 1, "", "generate_coordinates"], [4, 2, 1, "", "main"], [4, 2, 1, "", "sort_coordinates"], [4, 2, 1, "", "write_to_csv"]], "publisher_broker": [[7, 1, 1, "", "Publisher"]], "publisher_broker.Publisher": [[7, 2, 1, "", "main"], [7, 2, 1, "", "virtual_button"], [7, 2, 1, "", "virtual_tracker"]], "sensor_context_provider": [[8, 1, 1, "", "SensorCPConnector"]], "sensor_context_provider.SensorCPConnector": [[8, 2, 1, "", "create_entity"], [8, 2, 1, "", "delete_entity"], [8, 2, 1, "", "get_attribute"], [8, 2, 1, "", "get_entity"], [8, 2, 1, "", "new_entity"], [8, 2, 1, "", "update_entity"]], "subscriber_broker": [[9, 1, 1, "", "Subscriber"]], "subscriber_broker.Subscriber": [[9, 2, 1, "", "handling_device"], [9, 2, 1, "", "main"], [9, 2, 1, "", "on_message"]], "tracker_sensor": [[10, 1, 1, "", "TrackerCPFormat"], [10, 1, 1, "", "TrackerMQTTFormat"]], "tracker_sensor.TrackerCPFormat": [[10, 2, 1, "", "default_values"], [10, 2, 1, "", "new_entity"]], "tracker_sensor.TrackerMQTTFormat": [[10, 2, 1, "", "default_values"], [10, 2, 1, "", "generator"], [10, 2, 1, "", "initialize"], [10, 2, 1, "", "mqtt_to_cp"]], "virtual_sensor": [[11, 1, 1, "", "ClassFunctionalities"], [11, 1, 1, "", "SensorCPFormat"], [11, 1, 1, "", "SensorMQTTFormat"]], "virtual_sensor.ClassFunctionalities": [[11, 2, 1, "", "generator"]], "virtual_sensor.SensorCPFormat": [[11, 2, 1, "", "default_values"], [11, 2, 1, "", "get_date"], [11, 2, 1, "", "get_time"], [11, 2, 1, "", "new_entity"]], "virtual_sensor.SensorMQTTFormat": [[11, 2, 1, "", "generate_unique_hash"], [11, 2, 1, "", "get_datetime"], [11, 2, 1, "", "info_to_json"], [11, 2, 1, "", "mqtt_to_cp"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"broker": 0, "modul": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], "button_sensor": 1, "connector_serv": 2, "context_provid": 3, "coords_gener": 4, "welcom": 5, "iot": 5, "": 5, "document": 5, "indic": 5, "tabl": 5, "src": [5, 6], "publisher_brok": 7, "sensor_context_provid": 8, "subscriber_brok": 9, "tracker_sensor": 10, "virtual_sensor": 11}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"broker module": [[0, "module-broker"]], "button_sensor module": [[1, "module-button_sensor"]], "connector_server module": [[2, "module-connector_server"]], "context_provider module": [[3, "module-context_provider"]], "coords_generator module": [[4, "module-coords_generator"]], "Welcome to IOT\u2019s documentation!": [[5, "welcome-to-iot-s-documentation"]], "Indices and tables": [[5, "indices-and-tables"]], "Modules": [[5, "modules"]], "src": [[5, "src"], [6, "src"]], "publisher_broker module": [[7, "module-publisher_broker"]], "sensor_context_provider module": [[8, "module-sensor_context_provider"]], "subscriber_broker module": [[9, "module-subscriber_broker"]], "tracker_sensor module": [[10, "module-tracker_sensor"]], "virtual_sensor module": [[11, "module-virtual_sensor"]]}, "indexentries": {"broker (class in broker)": [[0, "broker.Broker"]], "broker": [[0, "module-broker"]], "connect_mqtt() (broker.broker method)": [[0, "broker.Broker.connect_mqtt"]], "dict_to_json() (broker.broker method)": [[0, "broker.Broker.dict_to_json"]], "exit() (broker.broker method)": [[0, "broker.Broker.exit"]], "generate_unique_hash() (broker.broker method)": [[0, "broker.Broker.generate_unique_hash"]], "json_to_dict() (broker.broker method)": [[0, "broker.Broker.json_to_dict"]], "logging() (broker.broker method)": [[0, "broker.Broker.logging"]], "main() (broker.broker method)": [[0, "broker.Broker.main"]], "module": [[0, "module-broker"], [1, "module-button_sensor"], [2, "module-connector_server"], [3, "module-context_provider"], [4, "module-coords_generator"], [7, "module-publisher_broker"], [8, "module-sensor_context_provider"], [9, "module-subscriber_broker"], [10, "module-tracker_sensor"], [11, "module-virtual_sensor"]], "on_connect() (broker.broker method)": [[0, "broker.Broker.on_connect"]], "on_message() (broker.broker method)": [[0, "broker.Broker.on_message"]], "on_publish() (broker.broker method)": [[0, "broker.Broker.on_publish"]], "path_to_file() (broker.broker method)": [[0, "broker.Broker.path_to_file"]], "publish() (broker.broker method)": [[0, "broker.Broker.publish"]], "run_loop() (broker.broker method)": [[0, "broker.Broker.run_loop"]], "run_once() (broker.broker method)": [[0, "broker.Broker.run_once"]], "subscribe() (broker.broker method)": [[0, "broker.Broker.subscribe"]], "button (class in button_sensor)": [[1, "button_sensor.Button"]], "buttoncpf (class in button_sensor)": [[1, "button_sensor.ButtonCPF"]], "button_sensor": [[1, "module-button_sensor"]], "default_values() (button_sensor.button method)": [[1, "button_sensor.Button.default_values"]], "default_values() (button_sensor.buttoncpf method)": [[1, "button_sensor.ButtonCPF.default_values"]], "initialize() (button_sensor.button method)": [[1, "button_sensor.Button.initialize"]], "mqtt_to_cp() (button_sensor.button method)": [[1, "button_sensor.Button.mqtt_to_cp"]], "new_entity() (button_sensor.buttoncpf method)": [[1, "button_sensor.ButtonCPF.new_entity"]], "build_sql_data() (in module connector_server)": [[2, "connector_server.build_sql_data"]], "connector_server": [[2, "module-connector_server"]], "device_info() (in module connector_server)": [[2, "connector_server.device_info"]], "fire() (in module connector_server)": [[2, "connector_server.fire"]], "get_device() (in module connector_server)": [[2, "connector_server.get_device"]], "get_id() (in module connector_server)": [[2, "connector_server.get_id"]], "handling_device() (in module connector_server)": [[2, "connector_server.handling_device"]], "home() (in module connector_server)": [[2, "connector_server.home"]], "save_to_database() (in module connector_server)": [[2, "connector_server.save_to_database"]], "contextprovider (class in context_provider)": [[3, "context_provider.ContextProvider"]], "build_request() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.build_request"]], "context_provider": [[3, "module-context_provider"]], "get_json_response() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.get_json_response"]], "is_json() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.is_json"]], "make_request() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.make_request"]], "set_headers() (context_provider.contextprovider method)": [[3, "context_provider.ContextProvider.set_headers"]], "coordsgenerator (class in coords_generator)": [[4, "coords_generator.CoordsGenerator"]], "coords_generator": [[4, "module-coords_generator"]], "example_generate() (coords_generator.coordsgenerator method)": [[4, "coords_generator.CoordsGenerator.example_generate"]], "generate_coordinates() (coords_generator.coordsgenerator method)": [[4, "coords_generator.CoordsGenerator.generate_coordinates"]], "main() (coords_generator.coordsgenerator method)": [[4, "coords_generator.CoordsGenerator.main"]], "sort_coordinates() (coords_generator.coordsgenerator method)": [[4, "coords_generator.CoordsGenerator.sort_coordinates"]], "write_to_csv() (coords_generator.coordsgenerator method)": [[4, "coords_generator.CoordsGenerator.write_to_csv"]], "publisher (class in publisher_broker)": [[7, "publisher_broker.Publisher"]], "main() (publisher_broker.publisher method)": [[7, "publisher_broker.Publisher.main"]], "publisher_broker": [[7, "module-publisher_broker"]], "virtual_button() (publisher_broker.publisher method)": [[7, "publisher_broker.Publisher.virtual_button"]], "virtual_tracker() (publisher_broker.publisher method)": [[7, "publisher_broker.Publisher.virtual_tracker"]], "sensorcpconnector (class in sensor_context_provider)": [[8, "sensor_context_provider.SensorCPConnector"]], "create_entity() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.create_entity"]], "delete_entity() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.delete_entity"]], "get_attribute() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.get_attribute"]], "get_entity() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.get_entity"]], "new_entity() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.new_entity"]], "sensor_context_provider": [[8, "module-sensor_context_provider"]], "update_entity() (sensor_context_provider.sensorcpconnector method)": [[8, "sensor_context_provider.SensorCPConnector.update_entity"]], "subscriber (class in subscriber_broker)": [[9, "subscriber_broker.Subscriber"]], "handling_device() (subscriber_broker.subscriber method)": [[9, "subscriber_broker.Subscriber.handling_device"]], "main() (subscriber_broker.subscriber method)": [[9, "subscriber_broker.Subscriber.main"]], "on_message() (subscriber_broker.subscriber method)": [[9, "subscriber_broker.Subscriber.on_message"]], "subscriber_broker": [[9, "module-subscriber_broker"]], "trackercpformat (class in tracker_sensor)": [[10, "tracker_sensor.TrackerCPFormat"]], "trackermqttformat (class in tracker_sensor)": [[10, "tracker_sensor.TrackerMQTTFormat"]], "default_values() (tracker_sensor.trackercpformat method)": [[10, "tracker_sensor.TrackerCPFormat.default_values"]], "default_values() (tracker_sensor.trackermqttformat method)": [[10, "tracker_sensor.TrackerMQTTFormat.default_values"]], "generator() (tracker_sensor.trackermqttformat method)": [[10, "tracker_sensor.TrackerMQTTFormat.generator"]], "initialize() (tracker_sensor.trackermqttformat method)": [[10, "tracker_sensor.TrackerMQTTFormat.initialize"]], "mqtt_to_cp() (tracker_sensor.trackermqttformat method)": [[10, "tracker_sensor.TrackerMQTTFormat.mqtt_to_cp"]], "new_entity() (tracker_sensor.trackercpformat method)": [[10, "tracker_sensor.TrackerCPFormat.new_entity"]], "tracker_sensor": [[10, "module-tracker_sensor"]], "classfunctionalities (class in virtual_sensor)": [[11, "virtual_sensor.ClassFunctionalities"]], "sensorcpformat (class in virtual_sensor)": [[11, "virtual_sensor.SensorCPFormat"]], "sensormqttformat (class in virtual_sensor)": [[11, "virtual_sensor.SensorMQTTFormat"]], "default_values() (virtual_sensor.sensorcpformat method)": [[11, "virtual_sensor.SensorCPFormat.default_values"]], "generate_unique_hash() (virtual_sensor.sensormqttformat method)": [[11, "virtual_sensor.SensorMQTTFormat.generate_unique_hash"]], "generator() (virtual_sensor.classfunctionalities method)": [[11, "virtual_sensor.ClassFunctionalities.generator"]], "get_date() (virtual_sensor.sensorcpformat method)": [[11, "virtual_sensor.SensorCPFormat.get_date"]], "get_datetime() (virtual_sensor.sensormqttformat method)": [[11, "virtual_sensor.SensorMQTTFormat.get_datetime"]], "get_time() (virtual_sensor.sensorcpformat method)": [[11, "virtual_sensor.SensorCPFormat.get_time"]], "info_to_json() (virtual_sensor.sensormqttformat method)": [[11, "virtual_sensor.SensorMQTTFormat.info_to_json"]], "mqtt_to_cp() (virtual_sensor.sensormqttformat method)": [[11, "virtual_sensor.SensorMQTTFormat.mqtt_to_cp"]], "new_entity() (virtual_sensor.sensorcpformat method)": [[11, "virtual_sensor.SensorCPFormat.new_entity"]], "virtual_sensor": [[11, "module-virtual_sensor"]]}})